pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }
    
    environment {
        SNAP_REPO = 'vprofile-snapshot'
        NEXUS_USERNAME = 'admin'
        NEXUS_PASSWORD = '123456789'
        RELEASE_REPO = 'vprofile-release'
        CENTRAL_REPO = 'vpro-maven-central'
        NEXUSIP = '172.31.56.68'
        NEXUSPORT = '8081'
        REPO_GROUP = 'vpro-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        MAVEN_HOME = '/usr/share/maven'
        MAVEN_OPTS = '-Dmaven.test.skip=true'
        ARTIFACT_ID = 'vprofile-v2'
        NEXUS_URL = 'http://54.237.90.228:8081/'
    }

    stages {
        stage('Build')
        {
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                  echo "Now Archiving."
                  archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('UNIT TEST'){
            steps {
                sh 'mvn -s settings.xml test'
            }
        }

	    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool "${SONARSCANNER}"
          }

          steps {
            withSonarQubeEnv("${SONARSERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }
          }
        }

        stage("QUALITY GATE") {
           steps {
               timeout(time: 1, unit: 'HOURS') {
                  waitForQualityGate abortPipeline: true
              }
           }
        }
        
        stage('Upload to Nexus') {
            steps {
                script {
                    // Define Nexus deployment settings
                    def nexusCredentials = usernamePassword(credentialsId: "${NEXUS_LOGIN}", usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')

                    // Deploy the artifact to Nexus
                    sh """
                        ${MAVEN_HOME}/bin/mvn deploy:deploy-file \
                        -DgroupId=${REPO_GROUP} \
                        -DartifactId=${ARTIFACT_ID} \
                        -Dversion=${VERSION} \
                        -Dpackaging=war \
                        -Dfile=target/${ARTIFACT_ID}.war \
                        -DrepositoryId=nexus \
                        -Durl=${NEXUS_URL} \
                        --settings ./settings.xml
                    """
                }
            }
        }

       /* stage('NEXUS UPLOADER') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                    groupId: 'com.example',
                    version: 'version',
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_LOGIN}",
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'my-service-' + version + 'war',
                        type: 'war']
                    ]
                )
            }
        } */
    }
}